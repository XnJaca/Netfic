@model Infraestructure.Models.Producto

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .my-gallery {
        display: flex;
        flex-wrap: wrap;
        justify-content: flex-start;
    }

    .image-preview {
        position: relative;
        max-width: 200px;
        max-height: 200px;
        margin: 5px;
    }

        .image-preview img {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
        }

    .btn-remove-image {
        position: absolute;
        top: 0;
        right: 0;
        padding: 0;
        font-size: 14px;
        line-height: 14px;
        width: 20px;
        height: 20px;
        background-color: #ff0000;
        color: #fff;
        border-radius: 50%;
        border: none;
        cursor: pointer;
    }
</style>

@using (Html.BeginForm("Save", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.id)

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="row">
            <div class="col-lg-6">
                <h4 class="control-label col-md-2">@Model.nombre</h4>
                <p>Es hora de editar un producto existente 😀.</p>
            </div>
        </div>

        <div class="row mt-4">
            <div class="col-lg-3">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="font-weight-bolder">Imagen del Producto</h5>
                        <div class="row">
                            <div class="col-xl-5 col-lg-6 text-center">
                                <div class="my-gallery d-flex mt-4 pt-2" itemscope="" itemtype="http://schema.org/ImageGallery" data-pswp-uid="1">
                                    <!-- Contenedor para las imágenes seleccionadas -->
                                    <div id="imageContainer" class="d-flex flex-wrap">
                                        @if (ViewBag.idFoto != null && ViewBag.idFoto.Count > 0)
                                        {
                                            foreach (var imageUrl in ViewBag.idFoto)
                                            {
                                                <div class="image-preview" id="images-previews">
                                                    <img src="@imageUrl" />
                                                    <button type="button" class="btn btn-danger btn-remove-image">X</button>
                                                    @*<button type="button" class="btn btn-danger btn-remove-image">X</button>*@
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>

                            <div class="col-12">
                                <input type="file" id="imageInput" name="ImageFiles" multiple />
                            </div>
                            <div class="col-12 mt-2">
                                <button type="button" id="clearImagesButton" class="btn btn-danger">Eliminar Imágenes</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-9 mt-lg-0 mt-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="font-weight-bolder">Informacion del Producto</h5>
                        <div class="row">
                            <div class="col-12 col-sm-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.nombre, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.nombre, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.nombre, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-12 col-sm-6 mt-3 mt-sm-0">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.EstadoProducto, "Estado")
                                    <div class="col-md-10">
                                        @Html.DropDownListFor(model => model.estadoId,
                                            (SelectList)ViewBag.idEstadoProducto,
                                            htmlAttributes: new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.estadoId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.precio, htmlAttributes: new { @class = "mt-4" })
                                    <div class="input-group input-group-alternative mb-4">
                                        <span class="input-group-text" style="font-weight: bold;">&#8353;</span>
                                        @Html.EditorFor(model => model.precio, new { htmlAttributes = new { @class = "form-control", type = "number" } })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.precio, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.cantidad, htmlAttributes: new { @class = "mt-4" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.cantidad, new { htmlAttributes = new { @class = "form-control", type = "number" } })
                                        @Html.ValidationMessageFor(model => model.cantidad, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Categoria, "Categoria", htmlAttributes: new { @class = "mt-4" })
                                    <div class="col-md-10">
                                        @Html.DropDownListFor(model => model.categoriaId,
                                            (SelectList)ViewBag.idCategoria,
                                            htmlAttributes: new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.categoriaId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.descripcion, htmlAttributes: new { @class = "mt-4" })
                                    <p class="form-text text-muted text-xs ms-1 d-inline">
                                    </p>
                                    <div class="col-md-10">
                                        @Html.TextAreaFor(model => model.descripcion, new { @class = "form-control", rows = "10", cols = "50" })
                                        @Html.ValidationMessageFor(model => model.descripcion, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row mt-4">
                <div class="col-lg-12 text-right d-flex flex-column ">
                    <button type="submit" class="btn btn-lg bg-gradient-primary mb-0 ms-lg-auto me-lg-0 me-auto mt-lg-0 mt-2">Guardar</button>
                </div>
            </div>
        </div>

       
    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

<script>
        $(document).ready(function () {
            // Variable global para almacenar las imágenes seleccionadas
            var selectedImages = [];
            var existingImages = [];
            $(".image-preview img").each(function () {
                existingImages.push($(this).attr("src"));
            });

            console.log(selectedImages);
            // Función para mostrar las imágenes seleccionadas en la vista
            function showPreview(input) {
                if (input.files && input.files.length > 0) {
                    for (let i = 0; i < input.files.length; i++) {
                        let reader = new FileReader();
                        reader.onload = function (e) {
                            // Mostrar la imagen en la vista
                            $("#imageContainer").append(
                                '<div class="image-preview">' +
                                '<img src="' + e.target.result + '" />' +
                                '<button type="button" class="btn btn-danger btn-remove-image">X</button>' +
                                '</div>'
                            );
                        };
                        reader.readAsDataURL(input.files[i]);

                        // Agregar la imagen a la lista de imágenes seleccionadas
                        selectedImages.push(input.files[i]);
                    }
                }
            }

            // Manejador de evento para cuando se selecciona una imagen
            $("#imageInput").change(function () {
                showPreview(this);
            });

            // Manejador de evento para eliminar una imagen en la vista de edición
            $("#imageContainer").on("click", ".btn-remove-image", function () {
                // Eliminar la imagen de la vista
                $(this).parent().remove();
                // Obtener el índice de la imagen eliminada y quitarla de la lista de imágenes seleccionadas
                const index = $(this).parent().index();
                selectedImages.splice(index, 1);
                // Limpiar el campo de entrada de archivos para eliminar la imagen seleccionada
                $("#imageInput").val(null);
            });

            // Manejador de evento para eliminar todas las imágenes seleccionadas
            $("#clearImagesButton").click(function () {
                $("#imageInput").val(null); // Limpiar el campo de entrada de archivos
                // Limpiar contenedor de imágenes previas
                $("#imageContainer").empty();
                // Limpiar la lista de imágenes seleccionadas
                selectedImages = [];
            });

            // Manejador de evento para enviar el formulario en la vista de edición
             $("#productForm").submit(function (event) {
                // Obtener el formulario y sus datos
                const formData = new FormData(this);
                 // Agregar las imágenes nuevas al FormData
                 var imageFilesInput = $("#imageInput")[0];
                 if (imageFilesInput.files && imageFilesInput.files.length > 0) {
                     for (let i = 0; i < imageFilesInput.files.length; i++) {
                         formData.append("ImageFiles", imageFilesInput.files[i]);
                     }
                 }

                 // Agregar las imágenes existentes al FormData
                 for (let i = 0; i < existingImages.length; i++) {
                     const imageUrl = existingImages[i];
                     formData.append("ExistingImages", imageUrl);
                 }

                // Enviar el formulario con las imágenes adjuntas
                $.ajax({
                    url: $(this).attr("action"),
                    type: "POST",
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (data) {
                        console.log("Success: " + data); // Verificar si se muestra este mensaje en la consola
                        // Manejar la respuesta del servidor si es necesario
                        // Redireccionar a otra página o mostrar un mensaje de éxito, etc.
                        window.location.href = "@Url.Action("Index", "Product")"; // Redirección manual al Index
                    },
                    error: function () {
                        // Manejar el error si ocurre
                    }
                });


                // Evitar el envío tradicional del formulario
                event.preventDefault();
            });
        });
</script>
}

