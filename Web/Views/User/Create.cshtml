@model Infraestructure.Models.Usuario

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Create</h2>


@using (Html.BeginForm("Save", "User", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Crear Usuario</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.nombre, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.nombre, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.nombre, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.apellidos, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.apellidos, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.apellidos, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.password, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.password, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.password, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.TipoUsuario, "Tipo Usuario ", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-10">
                        @*@Html.DropDownList("IdAutor", null, htmlAttributes: new { @class = "form-control" })*@
                        @Html.DropDownList("tipoUsuarios",
             (MultiSelectList)ViewBag.idTipoUsuario,
             new { @class = "form-control", multiple = "multiple", id = "tipoUsuarioSelect" })
                        @Html.ValidationMessageFor(model => model.TipoUsuario.FirstOrDefault().id, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.estado, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="form-check form-switch">
                            @Html.EditorFor(model => model.estado, new { htmlAttributes = new { @class = "form-check-input", @id = "flexSwitchCheckDefault" } })
                            @Html.Label("Usuario Activo", htmlAttributes: new { @class = "form-check-label", @for = "flexSwitchCheckDefault" })
                            @Html.ValidationMessageFor(model => model.estado, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            @*<input type="hidden" id="telefonos" name="telefonos" />*@
            <div class="col-md-4">
                <div class="form-group">
                    @*@Html.LabelFor(model => model.Telefono, htmlAttributes: new { @class = "control-label col-md-3" })*@
                    <label class="control-label col-md-3">Numero de Telefono</label>
                    <div class="col-md-10">
                        <input type="text" id="phoneNumberInput" placeholder="Número de teléfono" class="form-control" data-bs-toggle="tooltip" data-bs-placement="top" title="Ingrese el numero de telefono sin espacios ni guiones" pattern="[0-9]+" />
                        <span id="phoneNumberError" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @*@Html.LabelFor(model => model.Telefono.FirstOrDefault().tipoTelefono, htmlAttributes: new { @class = "control-label col-md-3" })*@
                    <label class="control-label col-md-3">Tipo Telefono</label>
                    <div class="col-md-10">
                        <select id="phoneTypeSelect" class="form-control">
                            <option value="CEL">CEL</option>
                            <option value="CASA">CASA</option>
                            <option value="TRABAJO">TRABAJO</option>
                        </select>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    <label class="control-label col-md-3" for="addPhoneNumberButton">Agregar</label>
                    <div class="col-md-8"></div>
                    <button type="button" id="addPhoneNumberButton" class="btn btn-success font-weight-normal btn-lg w-80">Agregar</button>
                </div>
                <ul id="phoneNumbersList"></ul>
            </div>
            <input type="hidden" id="telefonos" name="telefonos" value="" />
        </div>
    </div>

   

    <div class="form-group">
        <div class="row">
            <div class="col-md-8">
                @Html.ActionLink("Volver", "Index", null, new { @class = "btn btn-secondary" })
            </div>
            <div class="col-md-4 text-right">
                <input type="submit" value="Guardar" class="btn btn-primary font-weight-normal btn-lg w-80" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


<script>
    document.addEventListener("DOMContentLoaded", function () {

        



        var phoneNumberInput = document.getElementById("phoneNumberInput");
        var phoneNumberError = document.getElementById("phoneNumberError");
        var phoneTypeSelect = document.getElementById("phoneTypeSelect");
        var addPhoneNumberButton = document.getElementById("addPhoneNumberButton");
        var phoneNumbersList = document.getElementById("phoneNumbersList");
        var hiddenField = document.getElementById("telefonos");

        addPhoneNumberButton.addEventListener("click", function () {
            var phoneNumber = phoneNumberInput.value.replace(/[-\s]/g, ""); // Eliminar guiones y espacios

            if (phoneNumber.trim() === "") {
                showError("El número de teléfono no puede estar vacío");
            } else if (!isValidPhoneNumber(phoneNumber)) {
                showError("El número de teléfono no es válido");
            } else {
                phoneNumberInput.classList.remove("is-invalid");
                phoneNumberError.textContent = "";

                var listItem = document.createElement("li");

                var phoneNumberText = document.createElement("span");
                phoneNumberText.textContent = phoneNumber;
                listItem.appendChild(phoneNumberText);

                var phoneTypeText = document.createElement("span");
                phoneTypeText.textContent = " " + phoneTypeSelect.value;
                listItem.appendChild(phoneTypeText);

                var removeIcon = document.createElement("i");
                removeIcon.classList.add("fa", "fa-minus", "text-danger");
                removeIcon.addEventListener("click", function () {
                    listItem.remove();
                    updateHiddenField();
                });
                listItem.appendChild(removeIcon);

                phoneNumbersList.appendChild(listItem);

                phoneNumberInput.value = "";

                updateHiddenField();
            }
        });

        phoneNumberInput.addEventListener("input", function () {
            phoneNumberInput.classList.remove("is-invalid");
            phoneNumberError.textContent = "";
        });

        function isValidPhoneNumber(phoneNumber) {
            var numericRegex = /^[0-9]+$/;
            return numericRegex.test(phoneNumber);
        }

        function showError(errorMessage) {
            phoneNumberInput.classList.add("is-invalid");
            phoneNumberError.textContent = errorMessage;
        }

        function updateHiddenField() {
            var phoneNumberSpans = phoneNumbersList.getElementsByTagName("span");

            var phoneNumberData = Array.from(phoneNumberSpans).map(function (span) {
                return span.textContent.trim();
            }).join(", ");

            hiddenField.value = phoneNumberData;
        }

        document.getElementById("addPhoneNumberButton").addEventListener("click", function () {
            var phoneNumber = document.getElementById("phoneNumberInput").value;
            var phoneType = document.getElementById("phoneTypeSelect").value;

            if (phoneNumber && phoneType) {
                var phoneNumbersList = document.getElementById("phoneNumbersList");

                var listItem = document.createElement("li");
                var phoneNumberSpan = document.createElement("span");
                var phoneTypeSpan = document.createElement("span");
                var removeIcon = document.createElement("i");

                phoneNumberSpan.textContent = phoneNumber;
                phoneTypeSpan.textContent = phoneType;
                removeIcon.className = "fa fa-minus text-danger";
                removeIcon.onclick = function () {
                    removePhoneNumber(this);
                };

                listItem.appendChild(phoneNumberSpan);
                listItem.appendChild(phoneTypeSpan);
                listItem.appendChild(removeIcon);

                phoneNumbersList.appendChild(listItem);

                updateHiddenField();
            }
        });

        function removePhoneNumber(element) {
            var listItem = element.parentNode;
            listItem.remove();
            updateHiddenField();
        }

        // Establecer los valores de los teléfonos cuando se carga la página
        var phoneNumberSpans = phoneNumbersList.getElementsByTagName("span");
        if (phoneNumberSpans.length > 0) {
            var phoneNumbers = Array.from(phoneNumberSpans).map(function (span) {
                return span.textContent.trim();
            });

            hiddenField.value = phoneNumbers.join(", ");
        }
    });
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

}
